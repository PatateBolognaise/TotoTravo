const express = require('express');
const multer = require('multer');
const axios = require('axios');
const cors = require('cors');
const path = require('path');
const { getJson } = require('serpapi');
const DeepSeek = require('deepseek');
const OpenAI = require('openai');
require('dotenv').config();

const app = express();

// Configuration des variables d'environnement
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const SERPAPI_KEY = process.env.SERPAPI_KEY;
const PORT = process.env.PORT || 5000;

// Configuration DeepSeek
const deepseek = new DeepSeek({
    apiKey: DEEPSEEK_API_KEY || 'default-key'
});

// Configuration OpenAI
const openai = new OpenAI({
    apiKey: OPENAI_API_KEY
});

// V√©rification de la configuration
if (!OPENAI_API_KEY) {
    console.warn('‚ö†Ô∏è ATTENTION: OPENAI_API_KEY non configur√©e');
    console.warn('‚ö†Ô∏è L\'analyse IA ne fonctionnera pas sans cette cl√©');
    console.warn('‚ö†Ô∏è Mais les questions dynamiques fonctionneront pour les tests');
}

if (!DEEPSEEK_API_KEY) {
    console.warn('‚ö†Ô∏è ATTENTION: DEEPSEEK_API_KEY non configur√©e');
    console.warn('‚ö†Ô∏è Les questions DeepSeek ne fonctionneront pas sans cette cl√©');
    console.warn('‚ö†Ô∏è Fallback vers questions statiques activ√©');
}

// Middleware pour parser le JSON
app.use(express.json());

// Configuration CORS
app.use(cors({
    origin: [
        'http://localhost:3000',
        'http://localhost:5000',
        'https://*.vercel.app',
        'https://*.now.sh',
        'https://*.onrender.com',
        'https://tototravo.onrender.com'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));

// Configuration Multer pour les uploads
const storage = multer.memoryStorage();
const upload = multer({ 
    storage: storage,
    limits: { fileSize: 10 * 1024 * 1024 },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Seules les images sont autoris√©es'), false);
        }
    }
});

// Fonctions d'aide
function getBricolageLevel(niveau) {
    const levels = {
        'debutant': 'Peu d\'exp√©rience, conseils d√©taill√©s n√©cessaires',
        'intermediaire': 'Exp√©rience mod√©r√©e, peut faire des travaux simples',
        'expert': 'Exp√©rience avanc√©e, peut faire des travaux complexes'
    };
    return levels[niveau] || 'Niveau non sp√©cifi√©';
}

function getBudgetRange(budget) {
    const ranges = {
        'serre': 'Budget limit√©, optimiser les co√ªts',
        'moyen': 'Budget standard, qualit√© √©quilibr√©e',
        'confortable': 'Budget √©lev√©, qualit√© premium'
    };
    return ranges[budget] || 'Budget non sp√©cifi√©';
}

function getDelaiInfo(delai) {
    const infos = {
        'urgent': 'Travaux prioritaires, planning acc√©l√©r√©',
        'normal': 'D√©lai standard, planning √©quilibr√©',
        'flexible': 'D√©lai flexible, optimisation possible'
    };
    return infos[delai] || 'D√©lai non sp√©cifi√©';
}

function getImplicationInfo(implication) {
    const infos = {
        'minimale': 'Intervention minimale, artisan principal',
        'moderee': 'Participation mod√©r√©e, mix artisan/bricolage',
        'maximale': 'Participation maximale, bricolage principal'
    };
    return infos[implication] || 'Implication non sp√©cifi√©e';
}

function getProjectTypeInfo(type) {
    const infos = {
        'reparation': 'Travaux de r√©paration et maintenance',
        'renovation': 'R√©novation compl√®te',
        'amenagement': 'Am√©nagement et d√©coration',
        'construction': 'Travaux de construction'
    };
    return infos[type] || 'Type non sp√©cifi√©';
}

// Fonction pour g√©n√©rer des questions avec DeepSeek
async function generateAIQuestions(userProfile, description) {
    try {
        console.log('üöÄ G√©n√©ration des questions DeepSeek en cours...');
        
        const prompt = `Tu es un expert en r√©novation immobili√®re avec 20 ans d'exp√©rience. G√©n√®re 4-6 questions ULTRA-PERTINENTES et SP√âCIFIQUES pour personnaliser l'analyse d'un projet de r√©novation.

PROFIL UTILISATEUR D√âTAILL√â:
- Niveau bricolage: ${userProfile.niveau_bricolage} (${getBricolageLevel(userProfile.niveau_bricolage)})
- Budget: ${userProfile.budget} (${getBudgetRange(userProfile.budget)})
- D√©lai: ${userProfile.delai} (${getDelaiInfo(userProfile.delai)})
- Implication: ${userProfile.implication} (${getImplicationInfo(userProfile.implication)})
- Type projet: ${userProfile.type_projet} (${getProjectTypeInfo(userProfile.type_projet)})

DESCRIPTION DU PROJET: ${description}

INSTRUCTIONS ULTRA-PR√âCISES:
1. G√©n√®re des questions UNIQUEMENT bas√©es sur le profil et la description
2. Questions courtes et pr√©cises (max 8 mots)
3. Options de r√©ponses concises et pertinentes (max 4 options)
4. Focus sur les d√©tails qui impactent DIRECTEMENT l'analyse finale
5. Adapte selon le niveau de bricolage et le budget
6. Questions qui r√©v√®lent les VRAIES priorit√©s de l'utilisateur
7. √âvite les questions g√©n√©riques, sois SP√âCIFIQUE au projet

EXEMPLES DE QUESTIONS PERTINENTES:
- Pour une cuisine: "Quelle fonctionnalit√© privil√©gier ?" (cuisine sociale, pratique, esth√©tique, optimale)
- Pour un budget serr√©: "Comment optimiser votre budget ?" (mat√©riaux √©co, travaux essentiels, phases √©tal√©es)
- Pour un expert: "Quels mat√©riaux pr√©f√©rez-vous ?" (naturels, modernes, √©cologiques, durables)

FORMAT JSON STRICT:
{
  "questions": [
    {
      "id": "question_unique",
      "question": "Question courte et pr√©cise ?",
      "type": "radio",
      "options": [
        {"value": "option1", "label": "R√©ponse courte"},
        {"value": "option2", "label": "R√©ponse courte"},
        {"value": "option3", "label": "R√©ponse courte"},
        {"value": "option4", "label": "R√©ponse courte"}
      ],
      "required": true
    }
  ]
}

R√©ponds UNIQUEMENT avec le JSON valide.`;

        const response = await deepseek.chat.completions.create({
            model: 'deepseek-chat',
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.8,
            max_tokens: 1500
        });

        const content = response.choices[0].message.content;
        console.log('ü§ñ R√©ponse DeepSeek questions:', content);

        // Nettoyer et parser la r√©ponse
        const cleanedContent = content.replace(/```json\n?|\n?```/g, '').trim();
        const parsed = JSON.parse(cleanedContent);

        console.log('‚úÖ Questions DeepSeek g√©n√©r√©es avec succ√®s !');
        return parsed.questions || [];
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration questions DeepSeek:', error);
        console.log('üîÑ Fallback vers questions statiques...');
        return generateFallbackQuestions(userProfile, description);
    }
}

// Fonction de fallback pour les questions statiques
function generateFallbackQuestions(userProfile, description) {
    console.log('üîÑ Utilisation des questions de fallback...');
    
    const questions = [
        {
            id: 'ambiance_souhaitee',
            question: 'Quelle ambiance souhaitez-vous cr√©er ?',
            type: 'radio',
            options: [
                { value: 'cosy', label: 'Cosy et chaleureux' },
                { value: 'epure', label: '√âpur√© et minimaliste' },
                { value: 'luxueux', label: 'Luxueux et raffin√©' },
                { value: 'naturel', label: 'Naturel et authentique' },
                { value: 'moderne', label: 'Moderne et contemporain' }
            ],
            required: true
        },
        {
            id: 'plus_value',
            question: 'Quelle plus-value recherchez-vous ?',
            type: 'radio',
            options: [
                { value: 'confort_vie', label: 'Confort de vie' },
                { value: 'valeur_bien', label: 'Valeur du bien' },
                { value: 'esthetique', label: 'Esth√©tique' },
                { value: 'fonctionnalite', label: 'Fonctionnalit√©' }
            ],
            required: true
        },
        {
            id: 'organisation_travaux',
            question: 'Comment souhaitez-vous organiser les travaux ?',
            type: 'radio',
            options: [
                { value: 'vacances', label: 'Pendant les vacances' },
                { value: 'weekends', label: 'Weekends' },
                { value: 'soirees', label: 'Soir√©es' },
                { value: 'continue', label: 'En continu' }
            ],
            required: true
        }
    ];

    // Ajouter des questions sp√©cifiques selon le type de projet
    if (description.toLowerCase().includes('cuisine')) {
        questions.push({
            id: 'fonctionnalite_cuisine',
            question: 'Quelle fonctionnalit√© privil√©gier ?',
            type: 'radio',
            options: [
                { value: 'cuisine_sociale', label: 'Cuisine sociale et ouverte' },
                { value: 'cuisine_pratique', label: 'Cuisine pratique et fonctionnelle' },
                { value: 'cuisine_esthetique', label: 'Cuisine esth√©tique et design' },
                { value: 'cuisine_optimale', label: 'Cuisine optimale et moderne' }
            ],
            required: true
        });
    }

    if (description.toLowerCase().includes('chambre') || description.toLowerCase().includes('salle de bain')) {
        questions.push({
            id: 'fonction_chambre',
            question: 'Quelle fonction principale ?',
            type: 'radio',
            options: [
                { value: 'repos', label: 'Repos et d√©tente' },
                { value: 'travail', label: 'Travail et concentration' },
                { value: 'stockage', label: 'Stockage et organisation' },
                { value: 'polyvalente', label: 'Polyvalente' }
            ],
            required: true
        });
    }

    questions.push({
        id: 'preference_materiaux',
        question: 'Quels mat√©riaux pr√©f√©rez-vous ?',
        type: 'radio',
        options: [
            { value: 'naturels', label: 'Naturels (bois, pierre)' },
            { value: 'modernes', label: 'Modernes (m√©tal, verre)' },
            { value: 'ecologiques', label: '√âcologiques' },
            { value: 'durables', label: 'Durables et r√©sistants' }
        ],
        required: true
    });

    return questions;
}

// Route pour g√©n√©rer les questions dynamiques
app.post('/api/get-questions', async (req, res) => {
    try {
        console.log('üì• Requ√™te questions re√ßue');
        console.log('üìä Body:', req.body);
        
        const { userProfile, description } = req.body;
        
        console.log('üë§ Profil re√ßu:', userProfile);
        console.log('üìù Description re√ßue:', description);
        
        // G√©n√©rer les questions avec DeepSeek
        const questions = await generateAIQuestions(userProfile, description);
        
        console.log('‚ùì Questions g√©n√©r√©es:', questions);
        
        res.json({ questions });
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration questions:', error);
        res.status(500).json({ error: 'Erreur lors de la g√©n√©ration des questions' });
    }
});

// Route pour analyser les images
app.post('/api/analyze', upload.array('images', 5), async (req, res) => {
    try {
        console.log('üì• Requ√™te analyse re√ßue');
        
        const images = req.files;
        const description = req.body.description;
        const userProfile = JSON.parse(req.body.userProfile);
        
        console.log('üì∏ Images re√ßues:', images.length);
        console.log('üë§ Profil utilisateur:', userProfile);
        console.log('üìù Description du projet:', description);
        
        if (!images || images.length === 0) {
            return res.status(400).json({ error: 'Aucune image fournie' });
        }
        
        console.log('üì∏ Analyse de', images.length, 'images avec GPT-4 Vision');
        
        // V√©rification de la cl√© API
        if (!OPENAI_API_KEY) {
            throw new Error('Cl√© API OpenAI non configur√©e');
        }

        // Pr√©parer les images pour OpenAI
        const imageContents = images.map(image => ({
            type: 'image_url',
            image_url: {
                url: `data:${image.mimetype};base64,${image.buffer.toString('base64')}`
            }
        }));

        const prompt = `Tu es un expert artisan en r√©novation immobili√®re avec 30 ans d'exp√©rience. Analyse ces images et fournis une analyse compl√®te et d√©taill√©e. R√©ponds UNIQUEMENT avec un objet JSON valide.

PROFIL UTILISATEUR:
${JSON.stringify(userProfile, null, 2)}

DESCRIPTION DU PROJET:
${description || 'Aucune description fournie'}

FORMAT JSON:
{
  "analyse_globale": {
    "surface_totale": "XX m¬≤",
    "duree_estimee": "X semaines",
    "cout_total_estime": "XXXX ‚Ç¨",
    "complexite": "facile/moyen/complexe"
  },
  "pieces": [
    {
      "nom": "Nom de la pi√®ce",
      "surface": "XX m¬≤",
      "etat_general": "excellent/bon/moyen/mauvais/critique",
      "travaux_necessaires": "Description des travaux",
      "cout_estime": "XXX ‚Ç¨"
    }
  ],
  "conseils": "Conseils personnalis√©s"
}

R√©ponds UNIQUEMENT avec le JSON valide.`;

        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'user',
                    content: [
                        { type: 'text', text: prompt },
                        ...imageContents
                    ]
                }
            ],
            max_tokens: 4000,
            temperature: 0.3
        });

        const content = response.choices[0].message.content;
        console.log('ü§ñ R√©ponse OpenAI re√ßue');

        // Parser la r√©ponse JSON
        let parsedResponse;
        try {
            const cleanedContent = content.replace(/```json\n?|\n?```/g, '').trim();
            parsedResponse = JSON.parse(cleanedContent);
        } catch (parseError) {
            console.error('‚ùå Erreur parsing JSON:', parseError);
            throw new Error('Format de r√©ponse invalide');
        }

        console.log('‚úÖ Analyse termin√©e avec succ√®s');
        res.json(parsedResponse);

    } catch (error) {
        console.error('‚ùå Erreur analyse:', error);
        
        if (error.message.includes('Cl√© API OpenAI')) {
            res.status(401).json({ error: 'Cl√© API OpenAI invalide ou expir√©e - V√©rifiez OPENAI_API_KEY' });
        } else {
            res.status(500).json({ error: 'Erreur lors de l\'analyse des images' });
        }
    }
});

// Servir les fichiers statiques
app.use(express.static('public'));

// Route de health check pour Render
app.get('/api/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Route par d√©faut
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// D√©marrage du serveur
console.log('üöÄ D√©marrage serveur TotoTravo');
console.log('   PORT:', PORT);
console.log('   NODE_ENV:', process.env.NODE_ENV);
console.log('   OPENAI_API_KEY configur√©e:', !!OPENAI_API_KEY);
console.log('   DEEPSEEK_API_KEY configur√©e:', !!DEEPSEEK_API_KEY);

app.listen(PORT, () => {
    console.log('üöÄ Serveur d√©marr√© sur http://localhost:' + PORT);
    console.log('üåç Environnement:', process.env.NODE_ENV || 'development');
});

