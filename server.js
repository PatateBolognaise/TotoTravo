const express = require('express');
const multer = require('multer');
const axios = require('axios');
const path = require('path');
const cors = require('cors');
require('dotenv').config();

const app = express();

// Configuration CORS pour Vercel
app.use(cors({
    origin: ['http://localhost:3000', 'https://*.vercel.app', 'https://*.now.sh'],
    credentials: true
}));

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Servir les fichiers statiques
app.use(express.static(path.join(__dirname, 'public')));

// Route pour la page d'accueil
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';
const PORT = process.env.PORT || 3000;

// Configuration Multer pour Vercel (m√©moire uniquement)
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB max
        files: 5 // 5 fichiers max
    },
    fileFilter: (req, file, cb) => {
        // V√©rifier le type de fichier
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Seuls les fichiers images sont autoris√©s'), false);
        }
    }
});

// Fonction pour analyser les images avec GPT-4 Vision
async function analyzeImagesWithAI(files, userProfile, description = '') {
    try {
        console.log('üì∏ Analyse de', files.length, 'images avec GPT-4 Vision');
        
        // Convertir les images en base64
        const imageContents = await Promise.all(files.map(async (file) => {
            const base64 = file.buffer.toString('base64');
            return {
                type: "image_url",
                image_url: {
                    url: `data:${file.mimetype};base64,${base64}`
                }
            };
        }));

        console.log('üì§ Envoi √† GPT-4 Vision...');
        
        const prompt = `Tu es un expert artisan en r√©novation immobili√®re. Analyse ces images et r√©ponds UNIQUEMENT avec un objet JSON valide.

PROFIL UTILISATEUR:
- Niveau bricolage: ${userProfile.niveau_bricolage}
- Budget: ${userProfile.budget}
- D√©lai: ${userProfile.delai}
- Implication: ${userProfile.implication}
- Type projet: ${userProfile.type_projet}

DESCRIPTION DU PROJET (TR√àS IMPORTANT):
${description || 'Aucune description fournie'}

INSTRUCTIONS STRICTES:
1. Identifie les pi√®ces visibles dans les images
2. √âvalue l'√©tat actuel (bon/moyen/mauvais)
3. Liste les travaux n√©cessaires avec co√ªts r√©alistes 2024
4. INCLUS OBLIGATOIREMENT les √©l√©ments demand√©s dans la description du projet
5. Distingue artisan vs bricolage selon le profil
6. Fournis un planning r√©aliste
7. R√©ponds UNIQUEMENT avec du JSON valide, sans texte avant ou apr√®s

PRIX R√âALISTES 2024:
- Peinture: 15-25‚Ç¨/m¬≤
- Carrelage: 40-80‚Ç¨/m¬≤
- √âlectricit√©: 80-150‚Ç¨/point
- Plomberie: 100-200‚Ç¨/point
- Menuiserie: 200-500‚Ç¨/m¬≤
- D√©molition: 20-40‚Ç¨/m¬≤
- T√©l√© motoris√©: 2000-5000‚Ç¨
- Table motoris√©e: 3000-8000‚Ç¨
- Syst√®mes automatis√©s: 5000-15000‚Ç¨

FORMAT JSON OBLIGATOIRE (r√©ponds exactement comme √ßa):
{
  "pieces": [
    {
      "nom": "Nom de la pi√®ce",
      "etat": "bon/moyen/mauvais",
      "surface_estimee": "XXm¬≤",
      "travaux": [
        {
          "nom": "Nom du travail",
          "description": "Description courte",
          "type_execution": "artisan ou bricolage",
          "cout_materiaux": 1000,
          "cout_main_oeuvre": 2000,
          "cout_total": 3000,
          "duree_estimee": "X semaines",
          "priorite": "haute/moyenne/basse",
          "conseils": "Conseils courts"
        }
      ],
      "cout_total_piece": 5000
    }
  ],
  "analyse_globale": {
    "score_global": "bon/moyen/mauvais",
    "niveau_difficulte": 75,
    "cout_total": 15000,
    "duree_totale": "8 semaines",
    "commentaire_general": "Commentaire court",
    "travaux_artisan": [
      {
        "nom": "Travail artisan",
        "description": "Description",
        "cout": 8000,
        "duree": "4 semaines",
        "raison_artisan": "Pourquoi artisan"
      }
    ],
    "travaux_bricolage": [
      {
        "nom": "Travail bricolage",
        "description": "Description",
        "cout_materiaux": 2000,
        "duree": "2 semaines",
        "conseils_bricolage": "Conseils bricolage"
      }
    ],
    "planning": {
      "phase1_duree": "2 semaines",
      "phase1_taches": ["D√©molition", "Pr√©paration"],
      "phase2_duree": "4 semaines",
      "phase2_taches": ["Installation", "R√©novation"],
      "phase3_duree": "2 semaines",
      "phase3_taches": ["Finitions", "Peinture"],
      "duree_totale": "8 semaines"
    }
  }
}

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON, sans \`\`\`json ni texte avant/apr√®s.`;

        const requestData = {
            model: 'gpt-5o',
            messages: [
                {
                    role: 'system',
                    content: 'Tu es un expert artisan en r√©novation immobili√®re. Tu analyses des images et fournis des estimations d√©taill√©es et r√©alistes des travaux n√©cessaires.'
                },
                {
                    role: 'user',
                    content: [
                        {
                            type: "text",
                            text: prompt
                        },
                        ...imageContents
                    ]
                }
            ],
            max_tokens: 4000,
            temperature: 0.7
        };

        console.log('üîë Cl√© API utilis√©e:', OPENAI_API_KEY.substring(0, 20) + '...');
        console.log('üì§ Envoi √† OpenAI...');
        console.log('URL:', OPENAI_API_URL);
        console.log('Mod√®le:', requestData.model);
        
        let response;
        try {
            response = await axios.post(OPENAI_API_URL, requestData, {
                headers: {
                    'Authorization': `Bearer ${OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                timeout: 120000 // Augment√© √† 2 minutes pour Render
            });
        } catch (apiError) {
            console.error('‚ùå Erreur API OpenAI:', apiError.response?.status, apiError.response?.statusText);
            console.error('‚ùå D√©tails erreur:', apiError.response?.data);
            console.error('‚ùå Message erreur:', apiError.message);
            
            if (apiError.response?.status === 401) {
                throw new Error('Cl√© API OpenAI invalide ou expir√©e');
            } else if (apiError.response?.status === 429) {
                throw new Error('Limite de requ√™tes OpenAI d√©pass√©e');
            } else if (apiError.response?.status === 400) {
                throw new Error('Requ√™te OpenAI invalide: ' + JSON.stringify(apiError.response?.data));
            } else {
                throw new Error('Erreur API OpenAI: ' + apiError.message);
            }
        }

        console.log('‚úÖ R√©ponse OpenAI re√ßue');
        console.log('üìä Status:', response.status);
        console.log('üìä Headers:', response.headers);
        
        if (!response.data || !response.data.choices || !response.data.choices[0]) {
            throw new Error('R√©ponse OpenAI invalide: ' + JSON.stringify(response.data));
        }
        
        const aiResponse = response.data.choices[0].message.content;
        console.log('ü§ñ R√©ponse IA:', aiResponse.substring(0, 200) + '...');

        // Parser le JSON avec gestion d'erreur robuste
        try {
            // Nettoyer le contenu des marqueurs de code
            let cleanContent = aiResponse;
            
            // Supprimer les marqueurs ```json et ```
            cleanContent = cleanContent.replace(/```json\s*/g, '');
            cleanContent = cleanContent.replace(/```\s*/g, '');
            
            // Supprimer les espaces en d√©but et fin
            cleanContent = cleanContent.trim();
            
            console.log('üßπ Contenu nettoy√©:', cleanContent.substring(0, 200) + '...');
            
            const parsed = JSON.parse(cleanContent);
            console.log('‚úÖ JSON pars√© avec succ√®s');
            return parsed;
        } catch (parseError) {
            console.error('‚ùå Erreur parsing JSON:', parseError);
            console.log('üìÑ Contenu re√ßu:', aiResponse.substring(0, 500) + '...');
            
            // Tentative de r√©cup√©ration avec regex
            try {
                const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                    const recoveredJson = jsonMatch[0];
                    console.log('üîÑ Tentative de r√©cup√©ration JSON...');
                    const parsed = JSON.parse(recoveredJson);
                    console.log('‚úÖ JSON r√©cup√©r√© avec succ√®s');
                    return parsed;
                }
            } catch (recoveryError) {
                console.error('‚ùå √âchec de la r√©cup√©ration JSON:', recoveryError);
            }
            
            // Fallback avec une r√©ponse basique
            console.log('üîÑ Utilisation du fallback...');
            return {
                travaux: {
                    pieces: [
                        {
                            nom: "Pi√®ce analys√©e",
                            etat: "N√©cessite r√©novation compl√®te",
                            travaux: [
                                {
                                    nom: "R√©novation g√©n√©rale",
                                    description: "Travaux de r√©novation n√©cessaires selon les images",
                                    type_execution: "artisan",
                                    cout_materiaux: 1000,
                                    cout_main_oeuvre: 2000,
                                    cout_total: 3000,
                                    duree_estimee: "1-2 semaines",
                                    priorite: "moyenne",
                                    conseils: "Faites appel √† un artisan qualifi√© pour un devis pr√©cis"
                                }
                            ],
                            cout_total_piece: 3000
                        }
                    ],
                    analyse_globale: {
                        score_global: "moyen",
                        niveau_difficulte: 50,
                        cout_total: 3000,
                        duree_totale: "4 semaines",
                        commentaire_general: "Analyse basique - veuillez r√©essayer pour plus de d√©tails",
                        travaux_artisan: [
                            {
                                nom: "R√©novation g√©n√©rale",
                                description: "Travaux n√©cessitant un artisan",
                                cout: 3000,
                                duree: "1-2 semaines",
                                raison_artisan: "Travaux complexes n√©cessitant expertise"
                            }
                        ],
                        travaux_bricolage: [
                            {
                                nom: "Pr√©paration",
                                description: "Travaux de pr√©paration",
                                cout_materiaux: 200,
                                duree: "1 jour",
                                conseils_bricolage: "Pr√©parer la zone de travail"
                            }
                        ],
                        planning: {
                            phase1_duree: "1 semaine",
                            phase1_taches: ["Pr√©paration", "D√©molition"],
                            phase2_duree: "2 semaines",
                            phase2_taches: ["Installation", "R√©novation"],
                            phase3_duree: "1 semaine",
                            phase3_taches: ["Finitions", "Peinture"],
                            duree_totale: "4 semaines"
                        }
                    }
                }
            };
        }
    } catch (error) {
        console.error('‚ùå Erreur analyse images:', error.message);
        if (error.response) {
            console.error('Status:', error.response.status);
            console.error('Data:', error.response.data);
        }
        throw new Error(`Impossible d'analyser les images avec l'IA: ${error.message}`);
    }
}

// Fonction pour le chatbot avec GPT-4
async function chatWithAI(message, projectContext = '') {
    try {
        console.log('üí¨ Chatbot: ' + message);
        
        const systemPrompt = `Tu es un assistant expert en r√©novation immobili√®re. Tu r√©ponds de mani√®re concise et pratique aux questions des utilisateurs.

CONTEXTE DU PROJET: ${projectContext}

INSTRUCTIONS:
- R√©ponds de mani√®re claire et concise
- Donne des conseils pratiques et r√©alistes
- √âvite les r√©ponses trop longues
- Sois direct et utile`;

        const requestData = {
            model: 'gpt-5o',
            messages: [
                {
                    role: 'system',
                    content: systemPrompt
                },
                {
                    role: 'user',
                    content: message
                }
            ],
            max_tokens: 1000,
            temperature: 0.7
        };

        const response = await axios.post(OPENAI_API_URL, requestData, {
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        });

        const aiResponse = response.data.choices[0].message.content;
        console.log('ü§ñ Chatbot r√©ponse:', aiResponse);
        return aiResponse;
    } catch (error) {
        console.error('‚ùå Erreur chatbot:', error.message);
        return 'D√©sol√©, je ne peux pas r√©pondre pour le moment. Veuillez r√©essayer.';
    }
}

// Routes
app.post('/api/analyze-images', upload.array('images', 5), async (req, res) => {
    console.log('üì• Requ√™te analyse re√ßue');
    
    try {
        if (!req.files || req.files.length === 0) {
            return res.status(400).json({ error: 'Aucune image fournie' });
        }

        console.log('üì∏ Images re√ßues:', req.files.length);
        
        const userProfile = req.body.userProfile ? JSON.parse(req.body.userProfile) : {};
        const description = req.body.description || ''; // Get description from request body
        
        console.log('üë§ Profil utilisateur:', userProfile);
        console.log('üìù Description du projet:', description);
        
        // Analyser avec DeepSeek Chat
        const analysis = await analyzeImagesWithAI(req.files, userProfile, description);
        
        const result = {
            images: req.files.map(file => ({
                filename: file.originalname,
                originalname: file.originalname,
                path: `/uploads/${file.originalname}` // Assuming file.originalname is the filename
            })),
            travaux: analysis
        };
        
        console.log('üéâ Analyse termin√©e avec succ√®s');
        res.json(result);
        
    } catch (error) {
        console.error('‚ùå Erreur analyse:', error.message);
        res.status(500).json({ error: error.message });
    }
});

app.post('/api/chat', async (req, res) => {
    console.log('üí¨ Requ√™te chatbot re√ßue');
    
    try {
        const { message, projectContext } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Message requis' });
        }
        
        const response = await chatWithAI(message, projectContext);
        res.json({ response });
        
    } catch (error) {
        console.error('‚ùå Erreur chatbot:', error.message);
        res.status(500).json({ error: 'Erreur chatbot' });
    }
});

app.get('/api/test', (req, res) => {
    res.json({ 
        message: 'API TotoTravo fonctionne!',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development',
        port: PORT,
        openai_key_exists: !!OPENAI_API_KEY,
        openai_key_preview: OPENAI_API_KEY ? OPENAI_API_KEY.substring(0, 20) + '...' : 'Non d√©finie'
    });
});

// Gestion d'erreurs globale
app.use((error, req, res, next) => {
    console.error('‚ùå Erreur serveur:', error);
    res.status(500).json({
        error: 'Erreur interne du serveur',
        message: error.message,
        timestamp: new Date().toISOString()
    });
});

// Route de sant√© pour Vercel
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development'
    });
});

// D√©marrage du serveur
app.listen(PORT, () => {
    console.log('üîë Configuration:');
    console.log('   OPENAI_API_KEY:', OPENAI_API_KEY.substring(0, 20) + '...');
    console.log('   PORT:', PORT);
    console.log('üöÄ Serveur d√©marr√© sur http://localhost:' + PORT);
    console.log('üåç Environnement:', process.env.NODE_ENV || 'development');
});

// Export pour Vercel
module.exports = app;

