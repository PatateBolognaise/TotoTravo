const express = require('express');
const multer = require('multer');
const axios = require('axios');
const cors = require('cors');
const path = require('path');
const { getJson } = require('serpapi');
require('dotenv').config();

const app = express();

// Configuration des variables d'environnement
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const SERPAPI_KEY = process.env.SERPAPI_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';
const PORT = process.env.PORT || 5000;

// V√©rification de la configuration
if (!OPENAI_API_KEY) {
    console.warn('‚ö†Ô∏è ATTENTION: OPENAI_API_KEY non configur√©e');
    console.warn('‚ö†Ô∏è L\'analyse IA ne fonctionnera pas sans cette cl√©');
    console.warn('‚ö†Ô∏è Mais les questions dynamiques fonctionneront pour les tests');
    // Ne pas arr√™ter le serveur, juste avertir
}

// Middleware pour parser le JSON (DOIT √äTRE AVANT LES ROUTES)
app.use(express.json());

// Configuration CORS
app.use(cors({
    origin: [
        'http://localhost:3000',
        'http://localhost:5000',
        'https://*.vercel.app',
        'https://*.now.sh',
        'https://*.onrender.com',
        'https://tototravo.onrender.com'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));

// Fonctions d'aide pour adapter l'analyse selon le profil utilisateur
function getBricolageLevel(niveau) {
    const levels = {
        'debutant': 'Peu d\'exp√©rience, conseils d√©taill√©s n√©cessaires',
        'intermediaire': 'Exp√©rience mod√©r√©e, peut faire des travaux simples',
        'expert': 'Exp√©rience avanc√©e, peut faire des travaux complexes'
    };
    return levels[niveau] || 'Niveau non sp√©cifi√©';
}

function getBudgetRange(budget) {
    const ranges = {
        'serre': 'Budget limit√©, optimiser les co√ªts',
        'moyen': 'Budget standard, qualit√© √©quilibr√©e',
        'confortable': 'Budget √©lev√©, qualit√© premium'
    };
    return ranges[budget] || 'Budget non sp√©cifi√©';
}

function getDelaiInfo(delai) {
    const infos = {
        'urgent': 'Travaux prioritaires, planning acc√©l√©r√©',
        'normal': 'D√©lai standard, planning √©quilibr√©',
        'flexible': 'D√©lai flexible, optimisation possible'
    };
    return infos[delai] || 'D√©lai non sp√©cifi√©';
}

function getImplicationInfo(implication) {
    const infos = {
        'minimale': 'Intervention minimale, artisan principal',
        'moderee': 'Participation mod√©r√©e, mix artisan/bricolage',
        'maximale': 'Participation maximale, bricolage principal'
    };
    return infos[implication] || 'Implication non sp√©cifi√©e';
}

function getProjectTypeInfo(type) {
    const infos = {
        'reparation': 'Travaux de r√©paration et maintenance',
        'renovation': 'R√©novation compl√®te',
        'amenagement': 'Am√©nagement et d√©coration',
        'construction': 'Travaux de construction'
    };
    return infos[type] || 'Type non sp√©cifi√©';
}

function getBricolageInstructions(niveau) {
    const instructions = {
        'debutant': '- Privil√©gie les travaux simples et s√©curis√©s\n- Fournis des conseils d√©taill√©s √©tape par √©tape\n- Recommande des mat√©riaux faciles √† utiliser\n- √âvite les travaux dangereux ou complexes\n- Inclus des tutoriels et guides',
        'intermediaire': '- Propose un mix de travaux simples et mod√©r√©s\n- Fournis des conseils techniques d√©taill√©s\n- Recommande des mat√©riaux de qualit√© moyenne\n- Inclus des travaux n√©cessitant des comp√©tences de base\n- Donne des conseils de s√©curit√©',
        'expert': '- Peut proposer des travaux complexes\n- Fournis des conseils techniques avanc√©s\n- Recommande des mat√©riaux professionnels\n- Inclus des travaux n√©cessitant expertise\n- Optimise les co√ªts avec bricolage'
    };
    return instructions[niveau] || 'Instructions par d√©faut';
}

function getBudgetInstructions(budget) {
    const instructions = {
        'serre': '- Privil√©gie les mat√©riaux entr√©e de gamme\n- Optimise les co√ªts au maximum\n- Propose des alternatives √©conomiques\n- Inclus des conseils d\'√©conomie\n- √âvite les finitions premium',
        'moyen': '- √âquilibre qualit√© et prix\n- Propose des mat√©riaux milieu de gamme\n- Inclus quelques finitions soign√©es\n- Optimise sans sacrifier la qualit√©\n- Recommande des marques fiables',
        'confortable': '- Privil√©gie la qualit√© premium\n- Propose des mat√©riaux haut de gamme\n- Inclus des finitions soign√©es\n- Recommande des marques premium\n- Optimise l\'esth√©tique et la durabilit√©'
    };
    return instructions[budget] || 'Instructions par d√©faut';
}

function getDelaiInstructions(delai) {
    const instructions = {
        'urgent': '- Planning acc√©l√©r√© et optimis√©\n- Travaux prioritaires identifi√©s\n- Solutions rapides propos√©es\n- √âvite les d√©lais longs\n- Propose des alternatives express',
        'normal': '- Planning √©quilibr√©\n- Travaux organis√©s par priorit√©\n- D√©lais r√©alistes\n- Optimisation possible\n- Planning d√©taill√© par phases',
        'flexible': '- Planning optimis√© pour √©conomies\n- Travaux organis√©s par saison\n- D√©lais √©tal√©s si avantageux\n- Recherche de bonnes affaires\n- Planning flexible et adaptable'
    };
    return instructions[delai] || 'Instructions par d√©faut';
}

function getImplicationInstructions(implication) {
    const instructions = {
        'minimale': '- Travaux principalement par artisan\n- Conseils pour superviser\n- Choix de mat√©riaux simplifi√©s\n- Planning optimis√© pour artisan\n- Co√ªts main d\'≈ìuvre √©lev√©s',
        'moderee': '- Mix artisan et bricolage\n- Travaux simples en bricolage\n- Travaux complexes par artisan\n- Conseils de participation\n- Optimisation des co√ªts',
        'maximale': '- Travaux principalement en bricolage\n- Conseils techniques d√©taill√©s\n- Outils et mat√©riaux n√©cessaires\n- Planning adapt√© au bricolage\n- √âconomies maximales'
    };
    return instructions[implication] || 'Instructions par d√©faut';
}

// Fonction pour rechercher les prix r√©els avec SerpAPI
async function searchRealPrices(product, store = '') {
    try {
        if (!SERPAPI_KEY) {
            console.log('‚ö†Ô∏è SERPAPI_KEY non configur√©e, utilisation des prix de r√©f√©rence');
            return null;
        }

        const searchQuery = `${product} prix ${store}`.trim();
        console.log(`üîç Recherche de prix pour: ${searchQuery}`);

        const response = await getJson({
            engine: "google_shopping",
            q: searchQuery,
            api_key: SERPAPI_KEY,
            gl: "fr",
            hl: "fr"
        });

        if (response.shopping_results && response.shopping_results.length > 0) {
            const prices = response.shopping_results
                .map(result => {
                    const price = result.extracted_price || result.price;
                    return price ? parseFloat(price) : null;
                })
                .filter(price => price !== null);

            if (prices.length > 0) {
                const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length;
                const minPrice = Math.min(...prices);
                const maxPrice = Math.max(...prices);
                
                console.log(`üí∞ Prix trouv√©s pour ${product}: ${minPrice}‚Ç¨ - ${maxPrice}‚Ç¨ (moyenne: ${avgPrice.toFixed(2)}‚Ç¨)`);
                
                return {
                    min: minPrice,
                    max: maxPrice,
                    average: avgPrice,
                    source: 'SerpAPI'
                };
            }
        }

        console.log(`‚ùå Aucun prix trouv√© pour: ${product}`);
        return null;
    } catch (error) {
        console.error(`‚ùå Erreur recherche prix pour ${product}:`, error.message);
        return null;
    }
}

// Configuration Multer pour le stockage en m√©moire
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB max
        files: 5 // 5 fichiers max
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Seuls les fichiers images sont autoris√©s'), false);
        }
    }
});

// Fonction pour analyser les images avec GPT-4 Vision
async function analyzeImagesWithAI(files, userProfile, description = '') {
    try {
        console.log('üì∏ Analyse de', files.length, 'images avec GPT-4 Vision');
        
        // Convertir les images en base64
        const imageContents = await Promise.all(files.map(async (file) => {
            const base64 = file.buffer.toString('base64');
            return {
                type: "image_url",
                image_url: {
                    url: `data:${file.mimetype};base64,${base64}`
                }
            };
        }));

        console.log('üì§ Envoi √† GPT-4 Vision...');
        
        // Rechercher les prix r√©els pour les mat√©riaux courants
        console.log('üîç Recherche des prix r√©els en cours...');
        const realPrices = {};
        
        const commonMaterials = [
            'peinture murale dulux',
            'carrelage sol',
            'parquet ch√™ne',
            'moquette tarkett',
            'papier peint',
            'enduit lissage',
            'rouleau peinture'
        ];

        for (const material of commonMaterials) {
            const prices = await searchRealPrices(material);
            if (prices) {
                realPrices[material] = prices;
            }
        }

        // Si l'utilisateur demande un am√©nagement, rechercher les prix des meubles
        if (description.toLowerCase().includes('am√©nager') || description.toLowerCase().includes('meuble') || description.toLowerCase().includes('canap√©') || description.toLowerCase().includes('table')) {
            console.log('ü™ë Recherche des prix de meubles...');
            const furnitureItems = [
                'canap√© 3 places',
                'table salle √† manger',
                'lit 160cm',
                'armoire penderie',
                'commode',
                'bureau'
            ];

            for (const furniture of furnitureItems) {
                const prices = await searchRealPrices(furniture);
                if (prices) {
                    realPrices[furniture] = prices;
                }
            }
        }

        console.log('üí∞ Prix r√©els trouv√©s:', Object.keys(realPrices).length, 'produits');
        
        const prompt = `Tu es un expert artisan en r√©novation immobili√®re avec 20 ans d'exp√©rience. Analyse ces images et fournis une analyse ULTRA-D√âTAILL√âE avec m√©trage, prix des meubles, mat√©riaux, produits sp√©cifiques. R√©ponds UNIQUEMENT avec un objet JSON valide.

PRIX R√âELS TROUV√âS SUR INTERNET (utilise ces prix quand possible):
${JSON.stringify(realPrices, null, 2)}

PROFIL UTILISATEUR (ADAPTE TOUTE L'ANALYSE SELON CE PROFIL):
- Niveau bricolage: ${userProfile.niveau_bricolage} (${getBricolageLevel(userProfile.niveau_bricolage)})
- Budget: ${userProfile.budget} (${getBudgetRange(userProfile.budget)})
- D√©lai: ${userProfile.delai} (${getDelaiInfo(userProfile.delai)})
- Implication: ${userProfile.implication} (${getImplicationInfo(userProfile.implication)})
- Type projet: ${userProfile.type_projet} (${getProjectTypeInfo(userProfile.type_projet)})

DESCRIPTION DU PROJET (TR√àS IMPORTANT):
${description || 'Aucune description fournie'}

INSTRUCTIONS SP√âCIFIQUES SELON LE PROFIL:

**NIVEAU BRICOLAGE ${userProfile.niveau_bricolage.toUpperCase()}:**
${getBricolageInstructions(userProfile.niveau_bricolage)}

**BUDGET ${userProfile.budget.toUpperCase()}:**
${getBudgetInstructions(userProfile.budget)}

**D√âLAI ${userProfile.delai.toUpperCase()}:**
${getDelaiInstructions(userProfile.delai)}

**IMPLICATION ${userProfile.implication.toUpperCase()}:**
${getImplicationInstructions(userProfile.implication)}

INSTRUCTIONS STRICTES - ANALYSE ULTRA-D√âTAILL√âE:
1. **M√âTRAGE PR√âCIS** : Calcule la surface approximative de chaque pi√®ce
2. **IDENTIFICATION COMPL√àTE** : Murs, sols, plafonds, fen√™tres, portes, √©lectricit√©, plomberie
3. **√âTAT D√âTAILL√â** : √âtat de chaque √©l√©ment (excellent/bon/moyen/mauvais/critique)
4. **TRAVAUX COMPLETS** : Liste exhaustive de tous les travaux n√©cessaires
5. **PRIX R√âALISTES** : Estime les prix en fonction de la qualit√© et de la complexit√©
6. **MEUBLES ET √âQUIPEMENTS** : Si am√©nagement demand√©, liste compl√®te avec prix r√©alistes
7. **MAT√âRIAUX SP√âCIFIQUES** : Marques, r√©f√©rences, quantit√©s
8. **PRODUITS CONCRETS** : Noms de produits, magasins recommand√©s
9. **DISTINCTION ARTISAN/BRICOLAGE** : Selon le profil utilisateur
10. **PLANNING D√âTAILL√â** : Phases, t√¢ches, dur√©es pr√©cises

ESTIMATION DES PRIX - M√âTHODE R√âALISTE:

**PRINCIPES D'ESTIMATION:**
- √âvalue la QUALIT√â n√©cessaire selon le budget utilisateur
- Consid√®re la COMPLEXIT√â des travaux (√©tat actuel, accessibilit√©)
- Adapte les prix selon la R√âGION (France m√©tropolitaine)
- Inclus les FRAIS ANNEXES (d√©chets, protection, finitions)

**QUALIT√â SELON BUDGET:**
- Budget serr√©: Mat√©riaux entr√©e de gamme, finitions basiques
- Budget moyen: Mat√©riaux milieu de gamme, finitions correctes
- Budget confortable: Mat√©riaux haut de gamme, finitions soign√©es

**FACTEURS DE COMPLEXIT√â:**
- √âtat d√©grad√©: +20-30% sur les prix
- Travaux en hauteur: +15-25% sur main d'≈ìuvre
- D√©molition n√©cessaire: +10-20% sur mat√©riaux
- Finitions complexes: +25-40% sur main d'≈ìuvre

**PRIX DE R√âF√âRENCE 2024 (France):**

**MAT√âRIAUX DE BASE (prix/m¬≤):**
- Peinture murale: 8-15‚Ç¨ (entr√©e) / 15-25‚Ç¨ (moyen) / 25-40‚Ç¨ (haut)
- Carrelage sol: 25-45‚Ç¨ (entr√©e) / 45-80‚Ç¨ (moyen) / 80-150‚Ç¨ (haut)
- Parquet: 35-60‚Ç¨ (stratifi√©) / 60-100‚Ç¨ (contrecoll√©) / 100-200‚Ç¨ (massif)
- Moquette: 15-30‚Ç¨ (entr√©e) / 30-50‚Ç¨ (moyen) / 50-100‚Ç¨ (haut)

**√âLECTRICIT√â (prix/point):**
- Point lumineux: 60-100‚Ç¨ (simple) / 100-150‚Ç¨ (complexe)
- Prise √©lectrique: 40-80‚Ç¨ (simple) / 80-120‚Ç¨ (avec protection)
- Interrupteur: 30-60‚Ç¨ (simple) / 60-100‚Ç¨ (programmable)

**PLOMBERIE (prix/√©l√©ment):**
- Robinet lavabo: 50-120‚Ç¨ (entr√©e) / 120-250‚Ç¨ (moyen) / 250-500‚Ç¨ (haut)
- WC suspendu: 200-400‚Ç¨ (entr√©e) / 400-800‚Ç¨ (moyen) / 800-1500‚Ç¨ (haut)
- Douche √† l'italienne: 500-1000‚Ç¨ (simple) / 1000-2000‚Ç¨ (moyen) / 2000-4000‚Ç¨ (haut)

**MEUBLES (prix estim√©):**
- Canap√© 3 places: 400-800‚Ç¨ (entr√©e) / 800-2000‚Ç¨ (moyen) / 2000-5000‚Ç¨ (haut)
- Table salle √† manger: 200-500‚Ç¨ (entr√©e) / 500-1500‚Ç¨ (moyen) / 1500-4000‚Ç¨ (haut)
- Lit 160cm: 300-600‚Ç¨ (entr√©e) / 600-1500‚Ç¨ (moyen) / 1500-3000‚Ç¨ (haut)

**MAIN D'≈íUVRE 2024 (prix/h):**
- Ma√ßon: 35-50‚Ç¨ (r√©gion) / 50-70‚Ç¨ (Paris)
- √âlectricien: 40-60‚Ç¨ (r√©gion) / 60-80‚Ç¨ (Paris)
- Plombier: 45-65‚Ç¨ (r√©gion) / 65-85‚Ç¨ (Paris)
- Menuisier: 40-60‚Ç¨ (r√©gion) / 60-80‚Ç¨ (Paris)
- Carreleur: 35-55‚Ç¨ (r√©gion) / 55-75‚Ç¨ (Paris)
- Peintre: 25-40‚Ç¨ (r√©gion) / 40-60‚Ç¨ (Paris)

**IMPORTANT - ESTIMATION R√âALISTE:**
- UTILISE LES PRIX R√âELS TROUV√âS SUR INTERNET quand disponibles
- √âvalue l'√©tat actuel pour ajuster les prix
- Consid√®re la complexit√© des travaux
- Adapte selon le budget utilisateur
- Inclus les frais annexes (d√©chets, protection, finitions)
- Donne des fourchettes de prix r√©alistes bas√©es sur les prix actuels du march√©

FORMAT JSON OBLIGATOIRE - ULTRA-D√âTAILL√â:
{
  "pieces": [
    {
      "nom": "Nom de la pi√®ce",
      "etat": "bon/moyen/mauvais",
      "surface_estimee": "XXm¬≤",
      "dimensions": "L x l x h",
      "elements_identifies": [
        {
          "type": "mur/sol/plafond/fenetre/porte/electricite/plomberie",
          "etat": "excellent/bon/moyen/mauvais/critique",
          "description": "Description d√©taill√©e"
        }
      ],
      "travaux": [
        {
          "nom": "Nom du travail",
          "description": "Description tr√®s d√©taill√©e",
          "type_execution": "artisan ou bricolage",
          "surface_ou_quantite": "XXm¬≤ ou nombre",
          "materiaux_necessaires": [
            {
              "nom": "Nom du mat√©riau",
              "marque": "Marque recommand√©e",
              "quantite": "XX unit√©s",
              "prix_unitaire": 100,
              "prix_total": 1000,
              "magasin": "Leroy Merlin, Brico D√©p√¥t, etc."
            }
          ],
          "cout_materiaux": 1000,
          "cout_main_oeuvre": 2000,
          "cout_total": 3000,
          "duree_estimee": "X semaines",
          "priorite": "haute/moyenne/basse",
          "conseils": "Conseils d√©taill√©s",
          "produits_recommandes": ["Produit 1", "Produit 2"]
        }
      ],
      "meubles_equipements": [
        {
          "nom": "Nom du meuble",
          "type": "canape/table/lit/armoire/etc",
          "dimensions": "L x l x h",
          "prix_estime": 1000,
          "marques_recommandees": ["IKEA", "Roche Bobois"],
          "conseils_achat": "Conseils d'achat"
        }
      ],
      "cout_total_piece": 5000,
      "cout_materiaux_piece": 2000,
      "cout_main_oeuvre_piece": 3000
    }
  ],
  "analyse_globale": {
    "score_global": "bon/moyen/mauvais",
    "niveau_difficulte": 75,
    "cout_total": 15000,
    "cout_materiaux_total": 6000,
    "cout_main_oeuvre_total": 9000,
    "cout_meubles_total": 5000,
    "duree_totale": "8 semaines",
    "commentaire_general": "Commentaire d√©taill√©",
    "travaux_artisan": [
      {
        "nom": "Travail artisan",
        "description": "Description d√©taill√©e",
        "cout": 8000,
        "duree": "4 semaines",
        "raison_artisan": "Pourquoi artisan n√©cessaire",
        "artisan_recommande": "Type d'artisan"
      }
    ],
    "travaux_bricolage": [
      {
        "nom": "Travail bricolage",
        "description": "Description d√©taill√©e",
        "cout_materiaux": 2000,
        "duree": "2 semaines",
        "conseils_bricolage": "Conseils d√©taill√©s",
        "outils_necessaires": ["Outil 1", "Outil 2"],
        "difficulte": "facile/moyen/difficile"
      }
    ],
    "planning": {
      "phase1_duree": "2 semaines",
      "phase1_taches": ["D√©molition", "Pr√©paration"],
      "phase1_details": "D√©tails de la phase 1",
      "phase2_duree": "4 semaines",
      "phase2_taches": ["Installation", "R√©novation"],
      "phase2_details": "D√©tails de la phase 2",
      "phase3_duree": "2 semaines",
      "phase3_taches": ["Finitions", "Peinture"],
      "phase3_details": "D√©tails de la phase 3",
      "duree_totale": "8 semaines"
    },
    "recommandations": {
      "priorites": ["Travail 1", "Travail 2"],
      "economies_possibles": "Comment √©conomiser",
      "investissements_rentables": "Investissements recommand√©s",
      "conseils_securite": "Conseils de s√©curit√©"
    }
  }
}

IMPORTANT: 
- R√©ponds UNIQUEMENT avec le JSON, sans \`\`\`json ni texte avant/apr√®s
- Fournis TOUS les d√©tails demand√©s
- Inclus m√©trage, prix meubles, mat√©riaux sp√©cifiques, produits concrets
- Adapte selon le profil utilisateur et la description du projet`;

        const requestData = {
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: 'Tu es un expert artisan en r√©novation immobili√®re. Tu analyses des images et fournis des estimations d√©taill√©es et r√©alistes des travaux n√©cessaires.'
                },
                {
                    role: 'user',
                    content: [
                        {
                            type: "text",
                            text: prompt
                        },
                        ...imageContents
                    ]
                }
            ],
            max_tokens: 4000,
            temperature: 0.7
        };

        console.log('üîë Cl√© API configur√©e et valide');
        console.log('üì§ Envoi √† OpenAI...');
        console.log('URL:', OPENAI_API_URL);
        console.log('Mod√®le:', requestData.model);
        
        let response;
        try {
            response = await axios.post(OPENAI_API_URL, requestData, {
                headers: {
                    'Authorization': `Bearer ${OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                timeout: 120000 // Augment√© √† 2 minutes pour Render
            });
        } catch (apiError) {
            console.error('‚ùå Erreur API OpenAI:', apiError.response?.status, apiError.response?.statusText);
            console.error('‚ùå D√©tails erreur:', apiError.response?.data);
            console.error('‚ùå Message erreur:', apiError.message);
            console.error('‚ùå URL appel√©e:', OPENAI_API_URL);
            console.error('‚ùå Mod√®le utilis√©:', requestData.model);
            
            if (apiError.response?.status === 401) {
                throw new Error('Cl√© API OpenAI invalide ou expir√©e - V√©rifiez OPENAI_API_KEY');
            } else if (apiError.response?.status === 429) {
                throw new Error('Limite de requ√™tes OpenAI d√©pass√©e - R√©essayez plus tard');
            } else if (apiError.response?.status === 400) {
                throw new Error('Requ√™te OpenAI invalide: ' + JSON.stringify(apiError.response?.data));
            } else if (apiError.response?.status === 404) {
                throw new Error('Mod√®le OpenAI non trouv√© - V√©rifiez le nom du mod√®le');
            } else {
                throw new Error('Erreur API OpenAI: ' + apiError.message);
            }
        }

        console.log('‚úÖ R√©ponse OpenAI re√ßue');
        console.log('üìä Status:', response.status);
        console.log('üìä Headers:', response.headers);
        
        if (!response.data || !response.data.choices || !response.data.choices[0]) {
            throw new Error('R√©ponse OpenAI invalide: ' + JSON.stringify(response.data));
        }
        
        const aiResponse = response.data.choices[0].message.content;
        console.log('ü§ñ R√©ponse IA:', aiResponse.substring(0, 200) + '...');

        // Parser le JSON avec gestion d'erreur robuste
        try {
            // Nettoyer le contenu des marqueurs de code
            let cleanContent = aiResponse;
            
            // Supprimer les marqueurs ```json et ```
            cleanContent = cleanContent.replace(/```json\s*/g, '');
            cleanContent = cleanContent.replace(/```\s*/g, '');
            
            // Supprimer les espaces en d√©but et fin
            cleanContent = cleanContent.trim();
            
            console.log('üßπ Contenu nettoy√©:', cleanContent.substring(0, 200) + '...');
            
            const parsed = JSON.parse(cleanContent);
            console.log('‚úÖ JSON pars√© avec succ√®s');
            return parsed;
        } catch (parseError) {
            console.error('‚ùå Erreur parsing JSON:', parseError);
            console.log('üìÑ Contenu re√ßu:', aiResponse.substring(0, 500) + '...');
            
            // Tentative de r√©cup√©ration avec regex
            try {
                const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                    const recoveredJson = jsonMatch[0];
                    console.log('üîÑ Tentative de r√©cup√©ration JSON...');
                    const parsed = JSON.parse(recoveredJson);
                    console.log('‚úÖ JSON r√©cup√©r√© avec succ√®s');
                    return parsed;
                }
            } catch (recoveryError) {
                console.error('‚ùå √âchec de la r√©cup√©ration JSON:', recoveryError);
            }
            
            // Fallback avec une r√©ponse d√©taill√©e
            console.log('üîÑ Utilisation du fallback d√©taill√©...');
            return {
                pieces: [
                    {
                        nom: "Pi√®ce analys√©e",
                        etat: "N√©cessite r√©novation compl√®te",
                        surface_estimee: "15-20m¬≤",
                        dimensions: "4m x 4m x 2.5m",
                        elements_identifies: [
                            {
                                type: "mur",
                                etat: "moyen",
                                description: "Murs n√©cessitant r√©novation"
                            },
                            {
                                type: "sol",
                                etat: "mauvais",
                                description: "Sol √† refaire"
                            },
                            {
                                type: "plafond",
                                etat: "bon",
                                description: "Plafond en bon √©tat"
                            }
                        ],
                        travaux: [
                            {
                                nom: "R√©novation compl√®te",
                                description: "R√©novation compl√®te de la pi√®ce incluant murs, sol, √©lectricit√© et finitions",
                                type_execution: "artisan",
                                surface_ou_quantite: "15m¬≤",
                                materiaux_necessaires: [
                                    {
                                        nom: "Peinture murale",
                                        marque: "Dulux Ambiance",
                                        quantite: "5L",
                                        prix_unitaire: 35,
                                        prix_total: 175,
                                        magasin: "Leroy Merlin"
                                    },
                                    {
                                        nom: "Enduit de lissage",
                                        marque: "Placo",
                                        quantite: "10kg",
                                        prix_unitaire: 12,
                                        prix_total: 120,
                                        magasin: "Brico D√©p√¥t"
                                    },
                                    {
                                        nom: "Rouleau peinture",
                                        marque: "Proline",
                                        quantite: "2 unit√©s",
                                        prix_unitaire: 8,
                                        prix_total: 16,
                                        magasin: "Castorama"
                                    }
                                ],
                                cout_materiaux: 311,
                                cout_main_oeuvre: 800,
                                cout_total: 1111,
                                duree_estimee: "2-3 semaines",
                                priorite: "haute",
                                conseils: "Faites appel √† un artisan qualifi√© pour un devis pr√©cis. Pr√©voyez une marge de 20% pour les impr√©vus.",
                                produits_recommandes: ["Peinture Dulux Ambiance", "Carrelage Porcelanosa"]
                            }
                        ],
                        meubles_equipements: [
                            {
                                nom: "Canap√© 3 places",
                                type: "canape",
                                dimensions: "2.2m x 0.9m x 0.8m",
                                prix_estime: 1200,
                                marques_recommandees: ["IKEA", "Roche Bobois"],
                                conseils_achat: "Privil√©giez un canap√© convertible pour optimiser l'espace"
                            },
                            {
                                nom: "Table basse",
                                type: "table",
                                dimensions: "1.2m x 0.6m x 0.45m",
                                prix_estime: 300,
                                marques_recommandees: ["IKEA", "Maisons du Monde"],
                                conseils_achat: "Table avec rangement int√©gr√© recommand√©e"
                            }
                        ],
                        cout_total_piece: 1111,
                        cout_materiaux_piece: 311,
                        cout_main_oeuvre_piece: 800
                    }
                ],
                analyse_globale: {
                    score_global: "moyen",
                    niveau_difficulte: 65,
                    cout_total: 1111,
                    cout_materiaux_total: 311,
                    cout_main_oeuvre_total: 800,
                    cout_meubles_total: 0,
                    duree_totale: "3-4 semaines",
                    commentaire_general: "R√©novation compl√®te n√©cessaire. Travaux de qualit√© n√©cessitant un artisan qualifi√©. Budget r√©aliste pour un r√©sultat professionnel.",
                    travaux_artisan: [
                        {
                            nom: "R√©novation compl√®te",
                            description: "R√©novation compl√®te incluant ma√ßonnerie, √©lectricit√©, plomberie et finitions",
                            cout: 1111,
                            duree: "2-3 semaines",
                            raison_artisan: "Travaux complexes n√©cessitant expertise technique et garantie d√©cennale",
                            artisan_recommande: "Artisan g√©n√©raliste ou ma√ßon"
                        }
                    ],
                    travaux_bricolage: [
                        {
                            nom: "Pr√©paration et finitions",
                            description: "Pr√©paration des surfaces, pon√ßage, nettoyage et finitions",
                            cout_materiaux: 200,
                            duree: "1 semaine",
                            conseils_bricolage: "Pr√©parer la zone de travail, prot√©ger les meubles, a√©rer pendant les travaux",
                            outils_necessaires: ["Ponceuse", "Pinceaux", "Rouleaux", "B√¢ches de protection"],
                            difficulte: "moyen"
                        }
                    ],
                    planning: {
                        phase1_duree: "1 semaine",
                        phase1_taches: ["Pr√©paration", "D√©molition"],
                        phase1_details: "D√©montage des √©l√©ments existants et pr√©paration des surfaces",
                        phase2_duree: "2 semaines",
                        phase2_taches: ["Installation", "R√©novation"],
                        phase2_details: "Installation des nouveaux √©l√©ments et r√©novation des structures",
                        phase3_duree: "1 semaine",
                        phase3_taches: ["Finitions", "Peinture"],
                        phase3_details: "Finitions, peinture et nettoyage final",
                        duree_totale: "4 semaines"
                    },
                    recommandations: {
                        priorites: ["R√©novation structurelle", "Installation √©lectrique", "Finitions"],
                        economies_possibles: "Achetez les mat√©riaux en gros, n√©gociez avec les artisans",
                        investissements_rentables: "Isolation thermique, √©clairage LED, robinetterie √©conomique",
                        conseils_securite: "Portez des √©quipements de protection, a√©rez pendant les travaux"
                    }
                }
            };
        }
    } catch (error) {
        console.error('‚ùå Erreur analyse images:', error.message);
        if (error.response) {
            console.error('Status:', error.response.status);
            console.error('Data:', error.response.data);
        }
        throw new Error(`Impossible d'analyser les images avec l'IA: ${error.message}`);
    }
}

// Fonction pour le chatbot avec GPT-4
async function chatWithAI(message, projectContext = '') {
    try {
        console.log('üí¨ Chatbot: ' + message);
        
        const systemPrompt = `Tu es un assistant expert en r√©novation immobili√®re. Tu r√©ponds de mani√®re concise et pratique aux questions des utilisateurs.

CONTEXTE DU PROJET: ${projectContext}

INSTRUCTIONS:
- R√©ponds de mani√®re claire et concise
- Donne des conseils pratiques et r√©alistes
- √âvite les r√©ponses trop longues
- Sois direct et utile`;

        const requestData = {
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: systemPrompt
                },
                {
                    role: 'user',
                    content: message
                }
            ],
            max_tokens: 1000,
            temperature: 0.7
        };

        const response = await axios.post(OPENAI_API_URL, requestData, {
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        });

        const aiResponse = response.data.choices[0].message.content;
        console.log('ü§ñ Chatbot r√©ponse:', aiResponse);
        return aiResponse;
    } catch (error) {
        console.error('‚ùå Erreur chatbot:', error.message);
        return 'D√©sol√©, je ne peux pas r√©pondre pour le moment. Veuillez r√©essayer.';
    }
}

// Endpoint pour obtenir les questions dynamiques selon le profil
app.post('/api/get-questions', (req, res) => {
    try {
        console.log('üì• Requ√™te questions re√ßue');
        console.log('üìä Body:', req.body);
        
        const { userProfile, description } = req.body;
        
        if (!userProfile) {
            console.log('‚ùå Profil utilisateur manquant');
            return res.status(400).json({ error: 'Profil utilisateur requis' });
        }

        console.log('üë§ Profil re√ßu:', userProfile);
        console.log('üìù Description re√ßue:', description);

        const questions = generateDynamicQuestions(userProfile, description);
        console.log('‚ùì Questions g√©n√©r√©es:', questions);
        
        res.json({
            questions: questions,
            totalQuestions: questions.length
        });
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration questions:', error);
        res.status(500).json({ error: 'Erreur lors de la g√©n√©ration des questions' });
    }
});

// Fonction pour g√©n√©rer des questions dynamiques intelligentes
function generateDynamicQuestions(userProfile, description = '') {
    const questions = [];
    
    // Question de style universelle mais plus pertinente
    questions.push({
        id: 'ambiance_souhaitee',
        question: 'Quelle ambiance souhaitez-vous cr√©er ?',
        type: 'radio',
        options: [
            { value: 'cosy', label: 'Cosy et chaleureux' },
            { value: 'epure', label: '√âpur√© et minimaliste' },
            { value: 'luxueux', label: 'Luxueux et raffin√©' },
            { value: 'naturel', label: 'Naturel et authentique' },
            { value: 'contemporain', label: 'Contemporain et tendance' }
        ],
        required: true
    });

    // Question sur les priorit√©s selon le budget
    if (userProfile.budget === 'serre') {
        questions.push({
            id: 'optimisation_budget',
            question: 'Comment optimiser votre budget ?',
            type: 'radio',
            options: [
                { value: 'materiaux_eco', label: 'Mat√©riaux √©conomiques mais durables' },
                { value: 'travaux_essentiels', label: 'Travaux essentiels uniquement' },
                { value: 'phases_etalees', label: 'Travaux en plusieurs phases' },
                { value: 'recyclage', label: 'Recyclage et r√©cup√©ration' }
            ],
            required: true
        });
    } else if (userProfile.budget === 'confortable') {
        questions.push({
            id: 'plus_value',
            question: 'Quelle plus-value recherchez-vous ?',
            type: 'radio',
            options: [
                { value: 'valeur_bien', label: 'Augmenter la valeur du bien' },
                { value: 'confort_vie', label: 'Am√©liorer le confort de vie' },
                { value: 'esthetique', label: 'Transformation esth√©tique' },
                { value: 'modernisation', label: 'Modernisation compl√®te' }
            ],
            required: true
        });
    }

    // Question sur la dur√©e selon le d√©lai
    if (userProfile.delai === 'urgent') {
        questions.push({
            id: 'urgence_type',
            question: 'Quelle est la nature de l\'urgence ?',
            type: 'radio',
            options: [
                { value: 'securite', label: 'Probl√®me de s√©curit√©' },
                { value: 'fonctionnel', label: 'Probl√®me fonctionnel' },
                { value: 'evenement', label: '√âv√©nement √† venir' },
                { value: 'contrainte', label: 'Contrainte externe' }
            ],
            required: true
        });
    }

    // Question sur l'organisation selon l'implication
    if (userProfile.implication === 'maximale') {
        questions.push({
            id: 'organisation_travaux',
            question: 'Comment souhaitez-vous organiser les travaux ?',
            type: 'radio',
            options: [
                { value: 'weekends', label: 'Travaux le weekend' },
                { value: 'vacances', label: 'Pendant les vacances' },
                { value: 'soirees', label: 'En soir√©e apr√®s le travail' },
                { value: 'planning', label: 'Planning flexible selon disponibilit√©s' }
            ],
            required: true
        });
    }

    // Questions sp√©cifiques selon le type de pi√®ce
    const descriptionLower = description.toLowerCase();
    
    if (descriptionLower.includes('cuisine')) {
        questions.push({
            id: 'fonctionnalite_cuisine',
            question: 'Quelle fonctionnalit√© privil√©gier ?',
            type: 'radio',
            options: [
                { value: 'cuisine_sociale', label: 'Cuisine sociale et conviviale' },
                { value: 'cuisine_pratique', label: 'Cuisine pratique et fonctionnelle' },
                { value: 'cuisine_esthetique', label: 'Cuisine esth√©tique et design' },
                { value: 'cuisine_optimale', label: 'Optimisation de l\'espace' }
            ],
            required: true
        });
    }
    
    if (descriptionLower.includes('salle de bain') || descriptionLower.includes('salle bain')) {
        questions.push({
            id: 'experience_sdb',
            question: 'Quelle exp√©rience recherchez-vous ?',
            type: 'radio',
            options: [
                { value: 'spa', label: 'Ambiance spa et d√©tente' },
                { value: 'pratique', label: 'Pratique et fonctionnel' },
                { value: 'moderne', label: 'Moderne et design' },
                { value: 'accessible', label: 'Accessible et s√©curis√©' }
            ],
            required: true
        });
    }
    
    if (descriptionLower.includes('chambre')) {
        questions.push({
            id: 'fonction_chambre',
            question: 'Quelle fonction principale ?',
            type: 'radio',
            options: [
                { value: 'repos', label: 'Repos et d√©tente' },
                { value: 'travail', label: 'Travail et concentration' },
                { value: 'stockage', label: 'Stockage et rangement' },
                { value: 'polyvalente', label: 'Polyvalente et adaptable' }
            ],
            required: true
        });
    }

    // Question sur les mat√©riaux selon le niveau
    if (userProfile.niveau_bricolage === 'expert') {
        questions.push({
            id: 'preference_materiaux',
            question: 'Quels mat√©riaux pr√©f√©rez-vous ?',
            type: 'radio',
            options: [
                { value: 'naturels', label: 'Mat√©riaux naturels (bois, pierre)' },
                { value: 'modernes', label: 'Mat√©riaux modernes (verre, m√©tal)' },
                { value: 'ecologiques', label: 'Mat√©riaux √©cologiques' },
                { value: 'durables', label: 'Mat√©riaux ultra-durables' }
            ],
            required: true
        });
    }

    return questions;
}

// Routes
app.post('/api/analyze-images', upload.array('images', 5), async (req, res) => {
    console.log('üì• Requ√™te analyse re√ßue');
    console.log('üîç Headers:', req.headers);
    console.log('üìä Body keys:', Object.keys(req.body));
    
    try {
        if (!req.files || req.files.length === 0) {
            console.error('‚ùå Aucune image fournie');
            return res.status(400).json({ error: 'Aucune image fournie' });
        }

        console.log('üì∏ Images re√ßues:', req.files.length);
        console.log('üì∏ Types d\'images:', req.files.map(f => f.mimetype));
        
        let userProfile = {};
        let description = '';
        
        try {
            userProfile = req.body.userProfile ? JSON.parse(req.body.userProfile) : {};
            description = req.body.description || '';
        } catch (parseError) {
            console.error('‚ùå Erreur parsing userProfile:', parseError);
            userProfile = {};
            description = req.body.description || '';
        }
        
        console.log('üë§ Profil utilisateur:', userProfile);
        console.log('üìù Description du projet:', description);
        
        // Analyser avec OpenAI
        const analysis = await analyzeImagesWithAI(req.files, userProfile, description);
        
        const result = {
            images: req.files.map(file => ({
                name: file.originalname,
                size: file.size,
                type: file.mimetype
            })),
            analysis: analysis,
            timestamp: new Date().toISOString()
        };
        
        console.log('‚úÖ Analyse termin√©e avec succ√®s');
        res.json(result);
    } catch (error) {
        console.error('‚ùå Erreur analyse:', error.message);
        res.status(500).json({ 
            error: 'Erreur lors de l\'analyse des images',
            details: error.message 
        });
    }
});

// Route pour le chatbot
app.post('/api/chat', async (req, res) => {
    try {
        const { message, projectContext } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Message requis' });
        }
        
        const response = await chatWithAI(message, projectContext || '');
        res.json({ response });
    } catch (error) {
        console.error('‚ùå Erreur chatbot:', error.message);
        res.status(500).json({ 
            error: 'Erreur lors de l\'envoi du message',
            details: error.message 
        });
    }
});

// Route de test
app.get('/api/test', (req, res) => {
    res.json({
        message: 'API TotoTravo fonctionne!',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development',
        port: PORT,
        openai_key_exists: !!OPENAI_API_KEY,
        openai_key_preview: OPENAI_API_KEY ? '[CONFIGUR√âE]' : 'Non d√©finie'
    });
});

// Route de sant√© pour Render
app.get('/api/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// Servir les fichiers statiques
app.use(express.static('public'));

// Route principale
app.get('/', (req, res) => {
    try {
        res.sendFile(path.join(__dirname, 'public', 'index.html'));
    } catch (error) {
        console.error('‚ùå Erreur serveur fichier:', error.message);
        res.status(500).send('Erreur serveur');
    }
});

// Middleware de gestion d'erreur global
app.use((error, req, res, next) => {
    console.error('‚ùå Erreur serveur:', error);
    console.error('üìÑ URL:', req.url);
    console.error('üîß M√©thode:', req.method);
    console.error('üìã Headers:', req.headers);
    
    res.status(500).json({
        error: 'Erreur serveur interne',
        message: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
});

// D√©marrage du serveur
console.log('üöÄ D√©marrage serveur TotoTravo');
console.log('   PORT:', PORT);
console.log('   NODE_ENV:', process.env.NODE_ENV);
console.log('   OPENAI_API_KEY configur√©e:', !!OPENAI_API_KEY);

console.log('üîç Debug variables d\'environnement:');
console.log('   PORT:', process.env.PORT);
console.log('   NODE_ENV:', process.env.NODE_ENV);
console.log('   OPENAI_API_KEY existe:', !!OPENAI_API_KEY);
console.log('   OPENAI_API_KEY preview:', OPENAI_API_KEY ? OPENAI_API_KEY.substring(0, 20) + '...' : 'Non d√©finie');

app.listen(PORT, () => {
    console.log('üîë Configuration:');
    console.log('   OPENAI_API_KEY:', OPENAI_API_KEY ? OPENAI_API_KEY.substring(0, 20) + '...' : 'Non configur√©e');
    console.log('   PORT:', PORT);
    console.log('üöÄ Serveur d√©marr√© sur http://localhost:' + PORT);
    console.log('üåç Environnement:', process.env.NODE_ENV || 'development');
});

